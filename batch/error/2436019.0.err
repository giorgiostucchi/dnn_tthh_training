  File "/usr/sbin/make-jobfeatures", line 77
    os.umask(0022)
                ^
SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
Traceback (most recent call last):
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/source/file.py", line 112, in _open
    self._file = numpy.memmap(self._file_path, dtype=self._dtype, mode="r")
  File "/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_23/numpy/1.22.3/x86_64-centos7-gcc11-opt/lib/python3.9/site-packages/numpy/core/memmap.py", line 228, in __new__
    f_ctx = open(os_fspath(filename), ('r' if mode == 'c' else mode)+'b')
FileNotFoundError: [Errno 2] No such file or directory: '/eos/user/g/gstucchi/NTRUPLES/FullHadCuts/background.root'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/source/file.py", line 36, in __init__
    self._file = open(self._file_path, "rb")
FileNotFoundError: [Errno 2] No such file or directory: '/eos/user/g/gstucchi/NTRUPLES/FullHadCuts/background.root'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/pool/condor/dir_255853/tmp/tmp.GoLD90LawQ/train_SM.py", line 137, in <module>
    bkg_file = uproot.open("/eos/user/g/gstucchi/NTRUPLES/FullHadCuts/background.root:MiniTree_NOSYS")
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/reading.py", line 141, in open
    file = ReadOnlyFile(
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/reading.py", line 580, in __init__
    self._source = Source(
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/source/file.py", line 108, in __init__
    self._open()
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/source/file.py", line 118, in _open
    self._fallback = uproot.source.file.MultithreadedFileSource(
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/source/file.py", line 250, in __init__
    self._open()
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/source/file.py", line 254, in _open
    [FileResource(self._file_path) for x in range(self._num_workers)]
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/source/file.py", line 254, in <listcomp>
    [FileResource(self._file_path) for x in range(self._num_workers)]
  File "/afs/cern.ch/user/g/gstucchi/.local/lib/python3.9/site-packages/uproot/source/file.py", line 38, in __init__
    raise uproot._util._file_not_found(file_path) from err
FileNotFoundError: file not found

    '/eos/user/g/gstucchi/NTRUPLES/FullHadCuts/background.root'

Files may be specified as:
   * str/bytes: relative or absolute filesystem path or URL, without any colons
         other than Windows drive letter or URL schema.
         Examples: "rel/file.root", "C:\abs\file.root", "http://where/what.root"
   * str/bytes: same with an object-within-ROOT path, separated by a colon.
         Example: "rel/file.root:tdirectory/ttree"
   * pathlib.Path: always interpreted as a filesystem path or URL only (no
         object-within-ROOT path), regardless of whether there are any colons.
         Examples: Path("rel:/file.root"), Path("/abs/path:stuff.root")

Functions that accept many files (uproot.iterate, etc.) also allow:
   * glob syntax in str/bytes and pathlib.Path.
         Examples: Path("rel/*.root"), "/abs/*.root:tdirectory/ttree"
   * dict: keys are filesystem paths, values are objects-within-ROOT paths.
         Example: {"/data_v1/*.root": "ttree_v1", "/data_v2/*.root": "ttree_v2"}
   * already-open TTree objects.
   * iterables of the above.

